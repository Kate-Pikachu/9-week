1. Какие средства используются для организации межпроцессного взаимодействия? 
____________________________________
Виртуальная память - процесс думает, что он такой один, поэтому ему хорошо - память непрерывна и ее очень много
делится на страницы Pages (4кБ) - 2^20 шт
RAM - страничные кадры (4кБ) - нарезка физической памяти
address - номер страницы
смещение виртуальной памяти

нужно задать отбражение виртуальной памяти в физическую:
задается Page table - там записаны номер кадра и атрибуты - хранится в оперативной памяти, весит много -> компьютер не будет работать :(
	основные ячейки таблицы - пустые
	принцип локальности - рядом объявленные данные хранятся рядом
		т.е. можно в таблице есть пустые куски, которые хочется выкинуть
		разобьем теперь эту таблицу на несколько других тблиц меньшего размера - большинство окажется пустыми - можно выкинуть


____________________________________

есть 2 процесса, они изолированны - для взаимодействия нужно нарушить изоляцию
	1) kernel - отображают в одно место ядра
	2) shared memory - отобразить (без ядра) в один участок физической памяти, один кусок памяти общий к каким-то процессом
	3) memory mapped file - процессы общаются через общий отображенный в память файл
реализация через библитеку boost

2. Чем файлы, отображаемые в память, отличаются от разделяемой памяти? 

 - хранится не в ОЗУ, т.е. медленный
 - может не удалиться
 - нужно будет периодически сбрасывать данные
 - энергонезависимость

3. Что необходимо учитывать при создании контейнеров в разделяемой памяти? 

 - не знаем раположение контейнера в памяти, элементы не обязательно последовательны
как же разместить контейнейнер?
Использовать аллокатор (boost::interprocess::allocator) - позволяет контейнер положить в разделяемую память




4. Чем отличаются анонимные и именованные механизмы синхронизации? 

именнованные живут внитри операционной системы, внутри ядра;
анонимные - в разделяемой памяти


5. Как могут быть использованы библиотеки динамической компоновки DLL?

исходный файл пилим на кусочки(запускаемый файл и т.д.)
их по мере необзходимости загружаем в область запускаемого файла - не происходит раздувания
эти кусочки - динамические библиотеки

Пример: библиотека boost

Проблемы:
	- можно случайно распилить программу на слишком большое колическтво библиотек, библиотеки периодически обновляются
		- > при выходе очередной библиотеки обратная совместимость потерялась
	- одни библиотеки могут зависеть от других библиотек

Зачем использовать: 
	- распилить код
	- один код может использовать в нескольких программах одновременно 

 










